// Package services provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package services

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all computers
	// (GET /v1/computers)
	GetComputers(c *gin.Context)
	// Create data source
	// (POST /v1/computers)
	CreateComputer(c *gin.Context)
	// Get computers by employee
	// (GET /v1/computers/employee/{assignedEmployee})
	GetComputersByEmployee(c *gin.Context, assignedEmployee string)
	// Delete computer
	// (DELETE /v1/computers/{computerName})
	DeleteComputer(c *gin.Context, computerName string)
	// Get computer
	// (GET /v1/computers/{computerName})
	GetComputer(c *gin.Context, computerName string)
	// Update computer data
	// (PATCH /v1/computers/{computerName})
	UpdateComputer(c *gin.Context, computerName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetComputers operation middleware
func (siw *ServerInterfaceWrapper) GetComputers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetComputers(c)
}

// CreateComputer operation middleware
func (siw *ServerInterfaceWrapper) CreateComputer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateComputer(c)
}

// GetComputersByEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetComputersByEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "assignedEmployee" -------------
	var assignedEmployee string

	err = runtime.BindStyledParameter("simple", false, "assignedEmployee", c.Param("assignedEmployee"), &assignedEmployee)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter assignedEmployee: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetComputersByEmployee(c, assignedEmployee)
}

// DeleteComputer operation middleware
func (siw *ServerInterfaceWrapper) DeleteComputer(c *gin.Context) {

	var err error

	// ------------- Path parameter "computerName" -------------
	var computerName string

	err = runtime.BindStyledParameter("simple", false, "computerName", c.Param("computerName"), &computerName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter computerName: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteComputer(c, computerName)
}

// GetComputer operation middleware
func (siw *ServerInterfaceWrapper) GetComputer(c *gin.Context) {

	var err error

	// ------------- Path parameter "computerName" -------------
	var computerName string

	err = runtime.BindStyledParameter("simple", false, "computerName", c.Param("computerName"), &computerName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter computerName: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetComputer(c, computerName)
}

// UpdateComputer operation middleware
func (siw *ServerInterfaceWrapper) UpdateComputer(c *gin.Context) {

	var err error

	// ------------- Path parameter "computerName" -------------
	var computerName string

	err = runtime.BindStyledParameter("simple", false, "computerName", c.Param("computerName"), &computerName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter computerName: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateComputer(c, computerName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/computers", wrapper.GetComputers)
	router.POST(options.BaseURL+"/v1/computers", wrapper.CreateComputer)
	router.GET(options.BaseURL+"/v1/computers/employee/:assignedEmployee", wrapper.GetComputersByEmployee)
	router.DELETE(options.BaseURL+"/v1/computers/:computerName", wrapper.DeleteComputer)
	router.GET(options.BaseURL+"/v1/computers/:computerName", wrapper.GetComputer)
	router.PATCH(options.BaseURL+"/v1/computers/:computerName", wrapper.UpdateComputer)
}
